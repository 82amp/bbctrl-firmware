/******************************************************************************\

                This file is part of the Buildbotics firmware.

                  Copyright (c) 2015 - 2016 Buildbotics LLC
                            All rights reserved.

     This file ("the software") is free software: you can redistribute it
     and/or modify it under the terms of the GNU General Public License,
      version 2 as published by the Free Software Foundation. You should
      have received a copy of the GNU General Public License, version 2
     along with the software. If not, see <http://www.gnu.org/licenses/>.

     The software is distributed in the hope that it will be useful, but
          WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
               Lesser General Public License for more details.

       You should have received a copy of the GNU Lesser General Public
                License along with the software.  If not, see
                       <http://www.gnu.org/licenses/>.

                For information regarding this software email:
                  "Joseph Coffland" <joseph@buildbotics.com>

\******************************************************************************/

#define AXES_LABEL "xyzabcuvw"
#define MOTORS_LABEL "0123"
#define SWITCHES_LABEL "0123456789"

// VAR(name,        code, type,  index, settable, save, help)

// Motor
VAR(motor_map,      "ma", uint8_t,  MOTORS, 1, 1, "Motor to axis mapping")
VAR(step_angle,     "sa", float,    MOTORS, 1, 1, "In degrees per full step")
VAR(travel,         "tr", float,    MOTORS, 1, 1, "Travel in mm per revolution")
VAR(microstep,      "mi", uint16_t, MOTORS, 1, 1, "Microsteps per full step")
VAR(polarity,       "po", uint8_t,  MOTORS, 1, 1, "Normal or reversed")

VAR(power_mode,     "pm", uint8_t,  MOTORS, 1, 1, "Motor power mode")
VAR(power_level,    "pl", float,    MOTORS, 1, 1, "Motor drive current")
VAR(idle_level,     "il", float,    MOTORS, 1, 1, "Motor idle current")
VAR(current_level,  "cl", float,    MOTORS, 1, 1, "Motor current now")
VAR(stallguard,     "th", int8_t,   MOTORS, 1, 1, "StallGuard threshold")
VAR(sg_value,       "sg", uint16_t, MOTORS, 0, 0, "StallGuard reading")
VAR(status_flags,   "mf", uint8_t,  MOTORS, 0, 0, "Motor status flags")
VAR(status_strings, "ms", flags_t,  MOTORS, 0, 0, "Motor status strings")

// Axis
VAR(position,        "p", float,    AXES,   0, 0, "Current axis position")
VAR(axis_mode,      "am", uint8_t,  AXES,   1, 1, "Axis mode")
VAR(max_velocity,   "vm", float,    AXES,   1, 1, "Maxium velocity in mm/min")
VAR(max_feedrate,   "fr", float,    AXES,   1, 1, "Maxium feedrate in mm/min")
VAR(max_jerk,       "jm", float,    AXES,   1, 1, "Maxium jerk in mm/min^3")
VAR(junction_dev,   "jd", float,    AXES,   1, 1, "Junction deviation")

VAR(travel_min,     "tn", float,    AXES,   1, 1, "Minimum soft limit")
VAR(travel_max,     "tm", float,    AXES,   1, 1, "Maximum soft limit")

VAR(jerk_homing,    "jh", float,    AXES,   1, 1, "Maxium homing jerk")
VAR(search_vel,     "sv", float,    AXES,   1, 1, "Homing search velocity")
VAR(latch_vel,      "lv", float,    AXES,   1, 1, "Homing latch velocity")
VAR(latch_backoff,  "lb", float,    AXES,   1, 1, "Homing latch backof")
VAR(zero_backoff,   "zb", float,    AXES,   1, 1, "Homing zero backof")

// Spindle
VAR(max_spin,       "ss", float,    0,      1, 1, "Maximum spindle speed")
VAR(spindle_type,   "st", uint8_t,  0,      1, 1, "PWM=0 or HUANYANG=1")
VAR(spin_min_pulse, "np", float,    0,      1, 1, "Minimum pulse width")
VAR(spin_max_pulse, "mp", float,    0,      1, 1, "Maximum pulse width")
VAR(spin_polarity,  "sp", uint8_t,  0,      1, 1, "Normal or reversed")
VAR(spin_up,        "su", float,    0,      1, 1, "Spin up velocity")
VAR(spin_down,      "sd", float,    0,      1, 1, "Spin down velocity")

// Huanyang spindle
VAR(huanyang_id,        "hi", uint8_t,  0,  1, 1, "Huanyang ID")
VAR(huanyang_freq,      "hz", float,    0,  0, 0, "Huanyang actual freq")
VAR(huanyang_current,   "hc", float,    0,  0, 0, "Huanyang actual current")
VAR(huanyang_rpm,       "hr", uint16_t, 0,  0, 0, "Huanyang actual RPM")
//VAR(huanyang_dcv,       "hd", uint16_t, 0,  0, 0, "Huanyang DC voltage")
//VAR(huanyang_acv,       "ha", uint16_t, 0,  0, 0, "Huanyang AC voltage")
VAR(huanyang_temp,      "ht", uint16_t, 0,  0, 0, "Huanyang temperature")
VAR(huanyang_max_freq,  "hx", float,    0,  0, 0, "Huanyang max freq")
VAR(huanyang_min_freq,  "hm", float,    0,  0, 0, "Huanyang min freq")
VAR(huanyang_rated_rpm, "hq", uint16_t, 0,  0, 0, "Huanyang rated RPM")
VAR(huanyang_status,    "hs", uint8_t,  0,  0, 0, "Huanyang status flags")
VAR(huanyang_debug,     "hb", bool,     0,  1, 0, "Huanyang debugging")
VAR(huanyang_connected, "he", bool,     0,  0, 0, "Huanyang connected")

// Switches
VAR(switch_type,    "sw", uint8_t,  SWITCHES, 1, 1, "Normally open or closed")

// GCode
VAR(line,           "ln", int32_t,  0,      0, 0, "Last GCode line executed")
VAR(unit,            "u", pstring,  0,      0, 0, "Current unit of measure")
VAR(speed,           "s", float,    0,      0, 0, "Current spindle speed")
VAR(feed,            "f", float,    0,      0, 0, "Current feed rate")
VAR(tool,            "t", uint8_t,  0,      0, 0, "Current tool")
VAR(feed_rate_mode, "fm", pstring,  0,      0, 0, "Current feed rate mode")
VAR(plane,          "pa", pstring,  0,      0, 0, "Current plane")
VAR(coord_system,   "cs", pstring,  0,      0, 0, "Current coordinate system")
VAR(abs_override,   "ao", bool,     0,      0, 0, "Absolute override enabled")
VAR(path_control,   "pc", pstring,  0,      0, 0, "Current path control mode")
VAR(distance_mode,  "dm", pstring,  0,      0, 0, "Current distance mode")
VAR(arc_dist_mode,  "ad", pstring,  0,      0, 0, "Current arc distance mode")
VAR(mist_coolant,   "mc", bool,     0,      0, 0, "Mist coolant enabled")
VAR(flood_coolant,  "fc", bool,     0,      0, 0, "Flood coolant enabled")
VAR(feed_override,  "fo", float,    0,      0, 0, "Feed rate override")
VAR(speed_override, "so", float,    0,      0, 0, "Spindle speed override")

// System
VAR(velocity,        "v", float,    0,      0, 0, "Current velocity")
VAR(hw_id,          "id", string,   0,      0, 0, "Hardware ID")
VAR(echo,           "ec", bool,     0,      1, 0, "Enable or disable echo")
VAR(estop,          "es", bool,     0,      1, 0, "Emergency stop")
VAR(estop_reason,   "er", pstring,  0,      0, 0, "Emergency stop reason")
VAR(state,          "x",  pstring,  0,      0, 0, "Machine state")
VAR(cycle,          "c",  pstring,  0,      0, 0, "Machine cycle")
