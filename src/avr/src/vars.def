/******************************************************************************\

                 This file is part of the Buildbotics firmware.

                   Copyright (c) 2015 - 2018, Buildbotics LLC
                              All rights reserved.

      This file ("the software") is free software: you can redistribute it
      and/or modify it under the terms of the GNU General Public License,
       version 2 as published by the Free Software Foundation. You should
       have received a copy of the GNU General Public License, version 2
      along with the software. If not, see <http://www.gnu.org/licenses/>.

      The software is distributed in the hope that it will be useful, but
           WITHOUT ANY WARRANTY; without even the implied warranty of
       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
                Lesser General Public License for more details.

        You should have received a copy of the GNU Lesser General Public
                 License along with the software.  If not, see
                        <http://www.gnu.org/licenses/>.

                 For information regarding this software email:
                   "Joseph Coffland" <joseph@buildbotics.com>

\******************************************************************************/

#define AXES_LABEL "xyzabc"
#define MOTORS_LABEL "0123"
#define OUTS_LABEL "ed12f"

// VAR(name, code, type, index, settable, report, help)

// Motor
VAR(motor_axis,      an, u8,    MOTORS, 1, 1, "Maps motor to axis")
VAR(step_angle,      sa, f32,   MOTORS, 1, 1, "In degrees per full step")
VAR(travel,          tr, f32,   MOTORS, 1, 1, "Travel in mm/rev")
VAR(microstep,       mi, u16,   MOTORS, 1, 1, "Microsteps per full step")
VAR(reverse,         rv, u8,    MOTORS, 1, 1, "Reverse motor polarity")

VAR(power_mode,      pm, u8,    MOTORS, 1, 1, "Motor power mode")
VAR(drive_current,   dc, f32,   MOTORS, 1, 1, "Max motor drive current")
VAR(idle_current,    ic, f32,   MOTORS, 1, 1, "Motor idle current")
VAR(active_current,  ac, f32,   MOTORS, 0, 1, "Motor current now")
VAR(driver_flags,    df, u16,   MOTORS, 0, 1, "Motor driver flags")
VAR(status_strings,  ds, flags, MOTORS, 0, 1, "Motor driver status")
VAR(driver_stalled,  sl, bool,  MOTORS, 0, 1, "Motor driver status")
VAR(encoder,         en, s32,   MOTORS, 0, 0, "Motor encoder")
VAR(error,           ee, s32,   MOTORS, 0, 0, "Motor position error")

VAR(velocity_max,    vm, f32,   MOTORS, 1, 1, "Maxium vel in mm/min")
VAR(accel_max,       am, f32,   MOTORS, 1, 1, "Maxium accel in mm/min^2")
VAR(jerk_max,        jm, f32,   MOTORS, 1, 1, "Maxium jerk in mm/min^3")

VAR(motor_fault,     fa, bool,  0,      0, 1, "Motor fault status")

// Switches
VAR(min_sw_mode,     ls, u8,    MOTORS, 1, 1, "Minimum switch mode")
VAR(max_sw_mode,     xs, u8,    MOTORS, 1, 1, "Maximum switch mode")
VAR(estop_mode,      et, u8,    0,      1, 1, "Estop switch mode")
VAR(probe_mode,      pt, u8,    0,      1, 1, "Probe switch mode")
VAR(min_switch,      lw, u8,    MOTORS, 0, 1, "Minimum switch state")
VAR(max_switch,      xw, u8,    MOTORS, 0, 1, "Maximum switch state")
VAR(estop_switch,    ew, u8,    0,      0, 1, "Estop switch state")
VAR(probe_switch,    pw, u8,    0,      0, 1, "Probe switch state")

// Axis
VAR(axis_position,    p, f32,   AXES,   0, 1, "Axis position")

// Outputs
VAR(output_active,   oa, bool,  OUTS,   1, 1, "Output pin active")
VAR(output_state,    os, u8,    OUTS,   0, 1, "Output pin state")
VAR(output_mode,     om, u8,    OUTS,   1, 1, "Output pin mode")

// Spindle
VAR(spindle_type,    st, u8,    0,      1, 1, "PWM=0 or HUANYANG=1")
VAR(spin_reversed,   sr, bool,  0,      1, 1, "Reverse spin")
VAR(max_spin,        sx, f32,   0,      1, 1, "Maximum spindle speed")
VAR(min_spin,        sm, f32,   0,      1, 1, "Minimum spindle speed")
VAR(pwm_min_duty,    nd, f32,   0,      1, 1, "Minimum PWM duty cycle")
VAR(pwm_max_duty,    md, f32,   0,      1, 1, "Maximum PWM duty cycle")
VAR(pwm_duty,        pd, f32,   0,      0, 1, "Current PWM duty cycle")
VAR(pwm_freq,        sf, u16,   0,      1, 1, "Spindle PWM frequency in Hz")

// PWM spindle
VAR(pwm_invert,      pi, bool,  0,      1, 1, "Inverted spindle PWM")

// Huanyang spindle
VAR(hy_id,           hi, u8,    0,      1, 1, "Huanyang ID")
VAR(hy_freq,         hz, f32,   0,      0, 1, "Huanyang actual freq")
VAR(hy_current,      hc, f32,   0,      0, 1, "Huanyang actual current")
VAR(hy_rpm,          hr, u16,   0,      0, 1, "Huanyang actual RPM")
VAR(hy_temp,         ht, u16,   0,      0, 1, "Huanyang temperature")
VAR(hy_max_freq,     hx, f32,   0,      0, 1, "Huanyang max freq")
VAR(hy_min_freq,     hm, f32,   0,      0, 1, "Huanyang min freq")
VAR(hy_rated_rpm,    hq, u16,   0,      0, 1, "Huanyang rated RPM")
VAR(hy_status,       hs, u8,    0,      0, 1, "Huanyang status flags")
VAR(hy_debug,        hb, bool,  0,      1, 1, "Huanyang debugging")
VAR(hy_connected,    he, bool,  0,      0, 1, "Huanyang connected")

// Machine state
VAR(id,              id, u32,   0,      1, 1, "Last executed command ID")
VAR(speed,           s,  f32,   0,      1, 1, "Current spindle speed")
VAR(tool,            t,  u8,    0,      1, 1, "Current tool")
VAR(feed_override,   fo, f32,   0,      1, 1, "Feed rate override")
VAR(speed_override,  so, f32,   0,      1, 1, "Spindle speed override")

// System
VAR(velocity,        v,  f32,   0,      0, 1, "Current velocity")
VAR(acceleration,   ax,  f32,   0,      0, 1, "Current acceleration")
VAR(jerk,            j,  f32,   0,      0, 1, "Current jerk")
VAR(hw_id,          hid, str,   0,      0, 1, "Hardware ID")
VAR(echo,            ec, bool,  0,      1, 1, "Enable or disable echo")
VAR(estop,           es, bool,  0,      1, 1, "Emergency stop")
VAR(estop_reason,    er, pstr,  0,      0, 1, "Emergency stop reason")
VAR(state,           xx, pstr,  0,      0, 1, "Machine state")
VAR(hold_reason,     pr, pstr,  0,      0, 1, "Machine pause reason")
VAR(underflow,       un, u32,   0,      0, 1, "Stepper underflow count")
VAR(dwell_time,      dt, f32,   0,      0, 1, "Dwell timer")
