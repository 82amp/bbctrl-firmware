/******************************************************************************\

                   This file is part of the TinyG firmware.

                     Copyright (c) 2016, Buildbotics LLC
                             All rights reserved.

        The C! library is free software: you can redistribute it and/or
        modify it under the terms of the GNU Lesser General Public License
        as published by the Free Software Foundation, either version 2.1 of
        the License, or (at your option) any later version.

        The C! library is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
        Lesser General Public License for more details.

        You should have received a copy of the GNU Lesser General Public
        License along with the C! library.  If not, see
        <http://www.gnu.org/licenses/>.

        In addition, BSD licensing may be granted on a case by case basis
        by written permission from at least one of the copyright holders.
        You may request written permission by emailing the authors.

                For information regarding this software email:
                               Joseph Coffland
                            joseph@buildbotics.com

\******************************************************************************/

#define MOTORS_LABEL "xyzabcuvw"

// VAR(name, type,   index, settable, default, help)
VAR(pos,    float,    MOTORS,  0, 0, "Current axis position")
VAR(vel,    float,    0,       0, 0, "Current velosity")
VAR(ang,    float,    MOTORS,  1, 0, "Rotation angle in deg per full step")
VAR(trvl,   float,    MOTORS,  1, 0, "Travel in mm per revolution")
VAR(mstep,  uint16_t, MOTORS,  1, 0, "Microsteps per full step")
VAR(pol,    bool,     MOTORS,  1, 0, "Normal or reversed")
VAR(mvel,   uint16_t, MOTORS,  1, 0, "Maxium velocity in mm/min")
VAR(mjerk,  uint16_t, MOTORS,  1, 0, "Maxium jerk in m/min^3")

// Motor driver
VAR(dflags, uint8_t,  MOTORS,  0, 0, "Current motor status flags")
VAR(dcur,   float,    MOTORS,  1, 0, "Driver current as a percentage")
VAR(sguard, uint16_t, MOTORS,  0, 0, "Driver StallGuard reading")
VAR(sgt,    int8_t,   MOTORS,  1, 0, "Driver StallGuard threshold -64 to 63")
