//-/////////////////////////////////////////////////////////////////////////////
//-                                                                           //
//-              This file is part of the Buildbotics firmware.               //
//-                                                                           //
//-                Copyright (c) 2015 - 2018, Buildbotics LLC                 //
//-                           All rights reserved.                            //
//-                                                                           //
//-   This file ("the software") is free software: you can redistribute it    //
//-   and/or modify it under the terms of the GNU General Public License,     //
//-    version 2 as published by the Free Software Foundation. You should     //
//-    have received a copy of the GNU General Public License, version 2      //
//-   along with the software. If not, see <http://www.gnu.org/licenses/>.    //
//-                                                                           //
//-   The software is distributed in the hope that it will be useful, but     //
//-        WITHOUT ANY WARRANTY; without even the implied warranty of         //
//-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU      //
//-             Lesser General Public License for more details.               //
//-                                                                           //
//-     You should have received a copy of the GNU Lesser General Public      //
//-              License along with the software.  If not, see                //
//-                     <http://www.gnu.org/licenses/>.                       //
//-                                                                           //
//-              For information regarding this software email:               //
//-                "Joseph Coffland" <joseph@buildbotics.com>                 //
//-                                                                           //
//-/////////////////////////////////////////////////////////////////////////////

script#indicators-template(type="text/x-template")
  .indicators
    table.legend
      tr
        th.header(colspan=100) Legend

      tr
        td
         .fa.fa-plus-circle.io
        th Hi/+3.3v
        th.separator
        td
         .fa.fa-minus-circle.io
        th Lo/Gnd
        th.separator
        td
         .fa.fa-circle.io.active
        th Active
        th.separator
        td
         .fa.fa-circle.io.inactive
        th Inactive
        th.separator
        td
         .fa.fa-circle-o.io
        th Tristated/Disabled

    table.inputs
      tr
        th.header(colspan=7) Inputs

      tr
        th State
        th Pin
        th Name
        th.separator
        th State
        th Pin
        th Name

      each motor in '0123'
        tr
          td
            .fa.io(:class="get_input_class('#{motor}lw', '#{motor}ls')",
              :title="get_input_tooltip('#{motor}lw', '#{motor}ls')")
          td {{get_min_pin(#{motor})}}
          th Motor #{motor} Min
          th.separator
          td
            .fa.io(:class="get_input_class('#{motor}xw', '#{motor}xs')",
              :title="get_input_tooltip('#{motor}xw', '#{motor}xs')")
          td {{get_max_pin(#{motor})}}
          th Motor #{motor} Max

      tr
        td
          .fa.io(:class="get_input_class('ew', 'et')",
            :title="get_input_tooltip('ew', 'et')")
        td 23
        th EStop
        th.separator
        td
          .fa.io(:class="get_input_class('pw', 'pt')",
            :title="get_input_tooltip('pw', 'pt')")
        td 22
        th Probe

    table.outputs
      tr
        th.header(colspan=7) Outputs

      tr
        th State
        th Pin
        th Name
        th.separator
        th State
        th Pin
        th Name

      tr
        td
          .fa.io(:class="get_output_class('e')",
            :title="get_output_tooltip('e')")
        td 15
        th Tool Enable
        th.separator
        td
          .fa.io(:class="get_output_class('1')",
            :title="get_output_tooltip('1')")
        td 2
        th Load 1

      tr
        td
          .fa.io(:class="get_output_class('d')",
            :title="get_output_tooltip('d')")
        td 16
        th Tool Direction
        th.separator
        td
          .fa.io(:class="get_output_class('2')",
            :title="get_output_tooltip('2')")
        td 1
        th Load 2

      tr
        td {{state.pd | percent 0}}
        td 17
        th Tool PWM
        th.separator
        td
          .fa.io(:class="get_output_class('f')",
            :title="get_output_tooltip('f')")
        td 21
        th Fault

    table.pwr_fault
      tr
        th.header(colspan=5)
          | Power Faults
          span(v-if="state.pwr_version") &nbsp(Version {{state.pwr_version}})
      tr
        th(:class="{error: state.under_voltage}") Under voltage
        td(:class="{error: state.under_voltage}")
          | {{state.under_voltage ? 'True' : 'False'}}
        th.separator
        th(:class="{error: state.over_voltage}") Over voltage
        td(:class="{error: state.over_voltage}")
          | {{state.over_voltage ? 'True' : 'False'}}
      tr
        th(:class="{error: state.over_current}") Over current
        td(:class="{error: state.over_current}")
          | {{state.over_current ? 'True' : 'False'}}
        th.separator
        th(:class="{error: state.sense_error}", :title="sense_error")
          | Sense error
        td(:class="{error: state.sense_error}")
          | {{state.sense_error ? 'True' : 'False'}}
      tr
        th(:class="{error: state.shunt_overload}") Shunt overload
        td(:class="{error: state.shunt_overload}")
          | {{state.shunt_overload ? 'True' : 'False'}}
        th.separator
        th(:class="{error: state.motor_overload}") Motor overload
        td(:class="{error: state.motor_overload}")
          | {{state.motor_overload ? 'True' : 'False'}}
      tr
        th(:class="{error: state.load1_shutdown}") Load 1 shutdown
        td(:class="{error: state.load1_shutdown}")
          | {{state.load1_shutdown ? 'True' : 'False'}}
        th.separator
        th(:class="{error: state.load2_shutdown}") Load 2 shutdown
        td(:class="{error: state.load2_shutdown}")
          | {{state.load2_shutdown ? 'True' : 'False'}}
      tr
        th(:class="{error: state.motor_under_voltage}") Motor under volt
        td(:class="{error: state.motor_under_voltage}")
          | {{state.motor_under_voltage ? 'True' : 'False'}}
        th.separator
        th
        td

    table.measurements
      tr
        th.header(colspan=5) Measurements

      tr
        td {{state.vin | fixed 1}} V
        th Input
        th.separator
        td {{state.vout | fixed 1}} V
        th Output

      tr
        td {{state.motor | fixed 2}} A
        th Motor
        th.separator
        td {{state.temp | fixed 0}} â„ƒ
        th Temp

      tr
        td {{state.load1 | fixed 2}} A
        th Load 1
        th.separator
        td {{state.load2 | fixed 2}} A
        th Load 2

      tr
        td {{state['1ai'] | percent 0}} A
        th Analog 1
        th.separator
        td {{state['2ai'] | percent 0}} A
        th Analog 2

    table.modbus
      tr
        th.header(colspan=5) Modbus VFD

      tr
        td {{modbus_status}}
        th Status
        th.separator
        td {{state.hz}} Hz
        th Frequency

      tr
        td {{state.s}} RPM
        th Speed
        th.separator
        td {{state.hc}} A
        th Current

    h2 DB25 breakout box
    img(width=700, src="/images/DB25_breakout_box.png")

    h2 DB25-M2 breakout
    img(width=400, src="/images/DB25-M2_breakout.png")
