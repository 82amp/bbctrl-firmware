/******************************************************************************\

                This file is part of the Buildbotics firmware.

                  Copyright (c) 2015 - 2016 Buildbotics LLC
                            All rights reserved.

     This file ("the software") is free software: you can redistribute it
     and/or modify it under the terms of the GNU General Public License,
      version 2 as published by the Free Software Foundation. You should
      have received a copy of the GNU General Public License, version 2
     along with the software. If not, see <http://www.gnu.org/licenses/>.

     The software is distributed in the hope that it will be useful, but
          WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
               Lesser General Public License for more details.

       You should have received a copy of the GNU Lesser General Public
                License along with the software.  If not, see
                       <http://www.gnu.org/licenses/>.

                For information regarding this software email:
                  "Joseph Coffland" <joseph@buildbotics.com>

\******************************************************************************/

#define MOTORS_LABEL "xyzabcuvw"

// VAR(name, type,   index, settable, default, help)
VAR(pos,    float,    MOTORS,  0, 0, "Current axis position")
VAR(vel,    float,    0,       0, 0, "Current velocity")
VAR(ang,    float,    MOTORS,  1, 0, "Rotation angle in deg per full step")
VAR(trvl,   float,    MOTORS,  1, 0, "Travel in mm per revolution")
VAR(mstep,  uint16_t, MOTORS,  1, 0, "Microsteps per full step")
VAR(pol,    bool,     MOTORS,  1, 0, "Normal or reversed")
VAR(mvel,   uint16_t, MOTORS,  1, 0, "Maxium velocity in mm/min")
VAR(mjerk,  uint16_t, MOTORS,  1, 0, "Maxium jerk in m/min^3")

// Motor driver
VAR(dflags, uint8_t,  MOTORS,  0, 0, "Current motor status flags")
VAR(dcur,   float,    MOTORS,  1, 0, "Driver current as a percentage")
VAR(sguard, uint16_t, MOTORS,  0, 0, "Driver StallGuard reading")
VAR(sgt,    int8_t,   MOTORS,  1, 0, "Driver StallGuard threshold -64 to 63")
